def IMAGE_NAME = "sample"
def REPOSITORY_URL = "https://github.com/opsnow/sample"
def REPOSITORY_SECRET = ""
def SLACK_TOKEN = ""

@Library("github.com/opsnow-tools/valve-butler")
def butler = new com.opsnow.valve.Butler()
def label = "worker-${UUID.randomUUID().toString()}"
def VERSION = ""
def SOURCE_LANG = ""
def SOURCE_ROOT = ""
properties([
  buildDiscarder(logRotator(daysToKeepStr: "60", numToKeepStr: "30"))
])
podTemplate(label: label, containers: [
  containerTemplate(name: "builder", image: "quay.io/opsnow-tools/valve-builder", command: "cat", ttyEnabled: true, alwaysPullImage: true),
  containerTemplate(name: "maven", image: "maven:3.5.4-jdk-8-alpine", command: "cat", ttyEnabled: true)
], volumes: [
  // hostPathVolume(mountPath: "/var/run/docker.sock", hostPath: "/var/run/docker.sock"),
  // hostPathVolume(mountPath: "/home/jenkins/.draft", hostPath: "/home/jenkins/.draft"),
  // hostPathVolume(mountPath: "/home/jenkins/.helm", hostPath: "/home/jenkins/.helm")
]) {
  node(label) {
    stage("Prepare") {
      container("builder") {
        butler.prepare()

        if (!SLACK_TOKEN) {
          SLACK_TOKEN = butler.slack_token
        }
      }
    }
    stage("Checkout") {
      container("builder") {
        try {
          if (REPOSITORY_SECRET) {
            git(url: REPOSITORY_URL, branch: BRANCH_NAME, credentialsId: REPOSITORY_SECRET)
          } else {
            git(url: REPOSITORY_URL, branch: BRANCH_NAME)
          }
        } catch (e) {
          butler.failure(SLACK_TOKEN, "Checkout", IMAGE_NAME)
          throw e
        }

        butler.scan(IMAGE_NAME, BRANCH_NAME, "java")

        VERSION = butler.version
        // SOURCE_LANG = butler.source_lang
        // SOURCE_ROOT = butler.source_root
      }
    }
    stage("Build") {
      container("maven") {
        try {
          butler.mvn_build()
          butler.success(SLACK_TOKEN, "Build", IMAGE_NAME, VERSION)
        } catch (e) {
          butler.failure(SLACK_TOKEN, "Build", IMAGE_NAME)
          throw e
        }
      }
    }
    stage("Tests") {
      container("maven") {
        try {
          butler.mvn_test()
        } catch (e) {
          butler.failure(SLACK_TOKEN, "Tests", IMAGE_NAME)
          throw e
        }
      }
    }
    stage("Code Analysis") {
      container("maven") {
        try {
          butler.mvn_sonar()
        } catch (e) {
          butler.failure(SLACK_TOKEN, "Code Analysis", IMAGE_NAME)
          throw e
        }
      }
    }
    if (BRANCH_NAME == "master") {
      stage("Deploy Nexus") {
        container("maven") {
          try {
            butler.mvn_deploy()
            butler.success(SLACK_TOKEN, "Deploy", IMAGE_NAME, VERSION)
          } catch (e) {
            butler.failure(SLACK_TOKEN, "Deploy", IMAGE_NAME)
            throw e
          }
        }
      }
    }
  }
}
