#!/bin/bash

CUR_DIR=${0%/*}
CUR_OBJECT=`echo $CUR_DIR | cut -d "/" -f6`
CUR_NAME=${0##*/}

####### common functions
source ${ROOT_SHELL_DIR}/common.sh

readonly SHORT_OPT="hvalc"
readonly LONG_OPT="help,verbose,all,local,cluster"

_help() {
    cat <<EOF
================================================================================
Usage: valve ${CUR_OBJECT} ${CUR_NAME} {Params}

Params:
    -h, --help                  현재 화면을 보여줍니다. 

    -a, --all                   도구를 설치하고 로컬 환경을 초기화 합니다.
    -l, --local                 로컬 환경을 초기화 합니다.
    -c, --cluster               도구를 설치합니다.
================================================================================
EOF
}

_run() {

    OPTIONS=$(getopt -l "${LONG_OPT}" -o "${SHORT_OPT}" -a -- "$@"  2>${CUR_DIR}/.tmp)
    if  [ $? -eq 1 ]; then
        _help
        _error_noreport "Error params: `cat ${CUR_DIR}/.tmp && rm -f ${CUR_DIR}/.tmp `"
    elif ! [[ $@ =~ '-' ]]; then
        _help
        _error_noreport "Error params: $@"
    fi
    eval set -- "${OPTIONS}"

    while [ $# -gt 0 ]; do
        case "$1" in
            -a|--all)
                ALL=true
                ;;
            -l|--local)
                LOCAL=true
                ;;
            -c|--cluster)
                CLUSTER=true
                ;;
            -h|--help)
                _help
                exit 0
                ;;
            -v|--verbose)
                DEBUG_MODE=true
                VERBOSE=$(($VERBOSE + 1))
                ;;
            --)
                shift
                break
               ;;
        esac
        shift
    done

    _config_save
    if [ "${ALL}" == "true" ]; then
        _local
        _cluster
    elif [ "${LOCAL}" == "true" ]; then
        _local
    elif [ "${CLUSTER}" == "true" ]; then
        _cluster
    else
        _help
        _error_noreport
    fi

}

##################################################################################
_all() {
    _debug_mode
    _local
    _cluster
}

_local() {
    _debug_mode
# version
DATE=
KUBECTL=
HELM=
DRAFT=
GUARD=
ARGOCD=
AWS_CLI=
AWS_IAM_AUTHENTICATOR=
    ################################################################################
    DATE=$(date '+%Y-%m-%d %H:%M:%S')

    OS_NAME="$(uname | awk '{print tolower($0)}')"
    OS_FULL="$(uname -a)"
    OS_TYPE=

    if [ "${OS_NAME}" == "linux" ]; then
        if [ "$(command -v yum)" != "" ]; then
            OS_TYPE="yum"
        elif [ "$(command -v apt)" != "" ]; then
            OS_TYPE="apt"
        fi
    elif [ "${OS_NAME}" == "darwin" ]; then
        OS_TYPE="brew"
    elif [[ "${OS_NAME}" =~ "ming" ]]; then
        OS_TYPE="windows"
    fi

    _result "${OS_NAME} [${OS_TYPE}]"
    _result "${DATE}"

    if [ "${OS_TYPE}" == "" ]; then
        _error "Not supported OS. [${OS_NAME}]"
    fi

    # brew for mac
    if [ "${OS_TYPE}" == "brew" ]; then
        command -v brew > /dev/null || command_chk_exitcode "ruby -e '$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)'"
    fi

    # for ubuntu
    if [ "${OS_TYPE}" == "apt" ]; then
        export LC_ALL=C
    fi

    # update
    echo "================================================================================"
    _result "update..."

    if [ "${OS_TYPE}" == "apt" ]; then
        command_chk_exitcode "sudo apt update && sudo apt upgrade -y"
        command -v jq > /dev/null || command_chk_exitcode "sudo apt install -y jq"
        command -v git > /dev/null || command_chk_exitcode "sudo apt install -y git"
        command -v python3 > /dev/null || command_chk_exitcode "sudo apt install -y python3"
        command -v pip3 > /dev/null || command_chk_exitcode "curl -O https://bootstrap.pypa.io/get-pip.py"
        command -v python3-distutils > /dev/null || command_chk_exitcode "sudo apt-get -y install python3-distutils"
        command -v socat > /dev/null || command_chk_exitcode "sudo apt install -y socat"
        command -v unzip > /dev/null || command_chk_exitcode "sudo apt install -y unzip"
    elif [ "${OS_TYPE}" == "yum" ]; then
        sudo yum update -y
        command -v jq > /dev/null || command_chk_exitcode "sudo yum install -y jq"
        command -v git > /dev/null || command_chk_exitcode "sudo yum install -y git"
        command -v python3 > /dev/null || command_chk_exitcode "sudo yum install -y python3"
        command -v pip3 > /dev/null || command_chk_exitcode "curl -O https://bootstrap.pypa.io/get-pip.py"
    elif [ "${OS_TYPE}" == "brew" ]; then
        command_chk_exitcode "brew update && brew upgrade"
        command -v jq > /dev/null || command_chk_exitcode "brew install jq"
        command -v git > /dev/null || command_chk_exitcode "brew install git"
        
    elif [ "${OS_TYPE}" == "windows" ]; then
        command -v jq > /dev/null || choco install -y jq
        command -v wget > /dev/null || choco install -y wget
        command -v unzip > /dev/null || choco install -y unzip
    fi

    # aws-cli
    echo "================================================================================"
    _result "install aws-cli..."

    if [ "${OS_TYPE}" == "brew" ]; then
        command -v aws > /dev/null || command_chk_exitcode "brew install awscli"
        VERSION=$(aws --version | awk -F' ' '{print $1}' | cut -d/ -f2)
    elif [ "${OS_TYPE}" == "apt" ]; then
        command -v pip3 > /dev/null
        if ! [ $? -eq 0 ]; then
            command_chk_exitcode "python3 get-pip.py --user"
            command_chk_exitcode 'echo "PATH=~/.local/bin:$PATH" >> ~/.bashrc'
            command_chk_exitcode "export PATH=~/.local/bin:$PATH"
            command_chk_exitcode "pip3 --version"
            command_chk_exitcode "pip3 install awscli --upgrade --user"
            command_chk_exitcode "rm -f get-pip.py"
        else
            command_chk_exitcode "pip3 --version"
            command_chk_exitcode "pip3 install awscli --upgrade --user"
            command_chk_exitcode "rm -f get-pip.py"
        fi
        
        VERSION=$(aws --version | awk -F' ' '{print $1}' | cut -d/ -f2)
        echo $VERSION
    elif [ "${OS_TYPE}" == "windows" ]; then
        command -v aws > /dev/null || cmd.exe /c AWSCLI64PY3.msi
        VERSION=$(aws --version | awk -F' ' '{print $1}' | cut -d/ -f2)
    fi
    
    AWS_CLI="${VERSION}"
    command_chk_exitcode "aws --version | xargs"

    if [ ! -f ~/.aws/config ]; then
        # aws region
        command_chk_exitcode "aws configure set default.region ap-northeast-2"
    fi

    # kubectl
    echo "================================================================================"
    _result "install kubectl..."

    if [ "${OS_TYPE}" == "brew" ]; then
        command -v kubectl > /dev/null || command_chk_exitcode "brew install kubernetes-cli"
        VERSION=$(kubectl version --client --short | xargs | awk '{print $3}' | cut -d'+' -f1)
    elif [ "${OS_TYPE}" == "apt" ]; then
        VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)

        if [ "${KUBECTL}" != "${VERSION}" ] || [ "$(command -v kubectl)" == "" ]; then
            _result " ${KUBECTL} >> ${VERSION}"

            command_chk_exitcode "curl -LO https://storage.googleapis.com/kubernetes-release/release/${VERSION}/bin/${OS_NAME}/amd64/kubectl"
            command_chk_exitcode "chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl"
        fi
    elif [ "${OS_TYPE}" == "windows" ]; then
        command -v kubectl > /dev/null || choco install -y kubernetes-cli
        VERSION=$(kubectl version --client --short | xargs | awk '{print $3}' | cut -d'+' -f1)
    fi
    KUBECTL="${VERSION}"
    command_chk_exitcode "kubectl version --client --short | xargs | awk '{print $3}' | cut -d'+' -f1"

    # helm
    echo "================================================================================"
    _result "install helm..."

    if [ "${OS_TYPE}" == "brew" ]; then
        command -v helm > /dev/null || command_chk_exitcode "brew install kubernetes-helm"
        VERSION=$(helm version --client --short | cut -d'+' -f1)
        if [[ $VERSION =~ "v3.0" ]]; then
            command_chk_exitcode "brew unlink kubernetes-helm"
            command_chk_exitcode "brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/78d64252f30a12b6f4b3ce29686ab5e262eea812/Formula/kubernetes-helm.rb"
            command_chk_exitcode "brew switch kubernetes-helm 2.9.1"
        fi
    elif [ "${OS_TYPE}" == "apt" ]; then
        # VERSION=$(curl -s https://api.github.com/repos/helm/helm/releases/latest | jq -r '.tag_name')
        VERSION="v2.13.1"

        if [ "${HELM}" != "${VERSION}" ] || [ "$(command -v helm)" == "" ]; then
            _result " ${HELM} >> ${VERSION}"

            command_chk_exitcode "curl -L https://storage.googleapis.com/kubernetes-helm/helm-${VERSION}-${OS_NAME}-amd64.tar.gz | tar xz"
            command_chk_exitcode "sudo mv ${OS_NAME}-amd64/helm /usr/local/bin/helm && rm -rf ${OS_NAME}-amd64"
        fi
    elif [ "${OS_TYPE}" == "windows" ]; then
        command -v helm > /dev/null || choco install -y kubernetes-helm
        VERSION=$(helm version --client --short | cut -d'+' -f1)
        command_chk_exitcode "helm version --client --short | cut -d'+' -f1"
    fi
    HELM="${VERSION}"
    command_chk_exitcode "helm version --client --short | cut -d'+' -f1"

    # aws-iam-authenticator
    echo "================================================================================"
    _result "install aws-iam-authenticator..."

    if [ "${OS_TYPE}" == "brew" ]; then
        command -v aws-iam-authenticator > /dev/null || command_chk_exitcode "brew install aws-iam-authenticator"
        VERSION=$(brew info aws-iam-authenticator | grep stable | awk '{print $((NF-1))}')
    elif [ "${OS_TYPE}" == "apt" ]; then
        if [ "$(command -v aws-iam-authenticator)" == "" ]; then
            command_chk_exitcode "curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator"
            command_chk_exitcode "chmod +x ./aws-iam-authenticator"
            command_chk_exitcode "mkdir -p $HOME/.local/bin && mv ./aws-iam-authenticator $HOME/.local/bin/aws-iam-authenticator && export PATH=$HOME/.local/bin:$PATH"
            command_chk_exitcode "echo 'export PATH=$HOME/.local/bin:$PATH' >> ~/.bashrc"

            AWS-IAM-AUTHENTICATOR=`aws-iam-authenticator version | xargs`
        fi
        VERSION=$(aws-iam-authenticator version | awk -F, '{print $1}' | cut -d':' -f2 | tr --delete \")
    elif [ "${OS_TYPE}" == "windows" ]; then
        command -v aws-iam-authenticator > /dev/null || curl -o aws-iam-authenticator.exe https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/windows/amd64/aws-iam-authenticator.exe
        if [ -f "aws-iam-authenticator.exe" ]; then
            mv aws-iam-authenticator.exe $HOME/bin/
        fi
        VERSION=$(aws-iam-authenticator version | awk -F, '{print $1}' | cut -d':' -f2 | tr --delete \")
        
    fi
    AWS_IAM_AUTHENTICATOR=${VERSION}
    aws-iam-authenticator version

    # tfenv
    echo "================================================================================"
    _result "install tfenv..."

    if [ "$(command -v tfenv)" == "" ]; then
        if [ "${OS_TYPE}" == "brew" ]; then
            command -v tfenv > /dev/null || command_chk_exitcode "brew install tfenv"
            command_chk_exitcode "brew unlink terraform"
            command_chk_exitcode "brew link tfenv"
        elif [ "${OS_TYPE}" == "apt" ]; then
            command_chk_exitcode "git clone https://github.com/kamatama41/tfenv.git ~/.tfenv"
            command_chk_exitcode "ln -s ~/.tfenv/bin/tfenv ~/.local/bin/tfenv"
            command_chk_exitcode "ln -s ~/.tfenv/bin/terraform ~/.local/bin/terraform"
            command_chk_exitcode "export PATH=$HOME/.tfenv/bin:$PATH"
            tfenv_cnt=$(grep "tfenv" ~/.bashrc | xargs | wc -l)
            if [ $tfenv_cnt -eq 0 ]; then
                echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> ~/.bashrc
            fi
            command_chk_exitcode ". ~/.bashrc"
        elif [ "${OS_TYPE}" == "windows" ]; then
            git clone https://github.com/kamatama41/tfenv.git ~/.tfenv
            ln -s ~/.tfenv/bin/tfenv $HOME/bin/tfenv
            ln -s ~/.tfenv/bin/terraform $HOME/bin/terraform
            export PATH=$HOME/.tfenv/bin:$PATH
            tfenv_cnt=$(grep "tfenv" ~/.bashrc | xargs | wc -l)
            if [ $tfenv_cnt -eq 0 ]; then
                echo 'export PATH="$HOME/.tfenv/bin:$PATH"' >> ~/.bashrc
            fi
            . ~/.bashrc
        fi

        TERRAFORM_VERSION="0.12.16"

        command_chk_exitcode "tfenv install $TERRAFORM_VERSION"
    fi

    command_chk_exitcode "tfenv list"

    # # draft
    # echo "================================================================================"
    # _result "install draft..."

    # if [ "${OS_TYPE}" == "brew" ]; then
    #    command -v draft > /dev/null || brew tap azure/draft && brew install azure/draft/draft
    # else
    #     VERSION=$(curl -s https://api.github.com/repos/Azure/draft/releases/latest | jq -r '.tag_name')

    #     if [ "${DRAFT}" != "${VERSION}" ] || [ "$(command -v draft)" == "" ]; then
    #         _result " ${DRAFT} >> ${VERSION}"

    #         curl -L https://azuredraft.blob.core.windows.net/draft/draft-${VERSION}-${OS_NAME}-amd64.tar.gz | tar xz
    #         sudo mv ${OS_NAME}-amd64/draft /usr/local/bin/draft && rm -rf ${OS_NAME}-amd64

    #         DRAFT="${VERSION}"
    #     fi
    # fi

    # draft version --short | xargs | cut -d'+' -f1

    # guard
    

    if [ "${OS_TYPE}" == "windows" ]; then
        echo -e 
    else
        echo "================================================================================"
        _result "install guard..."
        # VERSION=$(curl -s https://api.github.com/repos/appscode/guard/releases/latest | jq -r '.tag_name')
        VERSION="0.1.2"

        if [ "${GUARD}" != "${VERSION}" ]; then
            _result " ${GUARD} >> ${VERSION}"

            command_chk_exitcode "curl -LO https://github.com/appscode/guard/releases/download/${VERSION}/guard-${OS_NAME}-amd64"
            command_chk_exitcode "chmod +x guard-${OS_NAME}-amd64 && sudo mv guard-${OS_NAME}-amd64 /usr/local/bin/guard"

            GUARD="${VERSION}"
        fi

        command_chk_exitcode "guard version 2>&1 | grep 'Version ' | xargs | awk '{print $3}'"
    fi

    # argocd cli
    if [ "${OS_TYPE}" == "windows" ]; then
        echo -e 
    else
        echo "================================================================================"
        _result "install argocd cli ..."

        # VERSION=$(curl -s https://api.github.com/repos/argoproj/argo-cd/releases/latest | jq -r '.tag_name')
        VERSION="v1.0.2"

        if [ "${ARGOCD}" != "${VERSION}" ]; then
            _result " ${ARGOCD} >> ${VERSION}"

            command_chk_exitcode "curl -LO https://github.com/argoproj/argo-cd/releases/download/${VERSION}/argocd-${OS_NAME}-amd64"
            command_chk_exitcode "chmod +x argocd-${OS_NAME}-amd64 && sudo mv argocd-${OS_NAME}-amd64 /usr/local/bin/argocd"

            ARGOCD="${VERSION}"
        fi

        command_chk_exitcode "argocd version 2>&1 | grep 'argocd' | xargs | awk '{print $2}'"
    fi

    # clean
    echo "================================================================================"
    _result "clean all..."

    if [ "${OS_TYPE}" == "apt" ]; then
        command_chk_exitcode "sudo apt clean all"
        command_chk_exitcode "sudo apt autoremove -y"
    elif [ "${OS_TYPE}" == "yum" ]; then
        command_chk_exitcode "sudo yum clean all"
    elif [ "${OS_TYPE}" == "brew" ]; then
        command_chk_exitcode "brew cleanup"
    fi

    echo "================================================================================"
    
    v_cnt=$(cat ${CONFIG} | grep version | wc -l)

    if [ $v_cnt -eq 0 ]; then
cat <<EOF >> ${CONFIG}
# version
DATE="${DATE}"
KUBECTL="${KUBECTL}"
HELM="${HELM}"
DRAFT="${DRAFT}"
GUARD="${GUARD}"
ARGOCD="${ARGOCD}"
AWS_CLI="${AWS_CLI}"
AWS_IAM_AUTHENTICATOR="${AWS_IAM_AUTHENTICATOR}"
EOF
        cat ${CONFIG}

    elif [ $v_cnt -eq 1 ]; then
        DATE_LINE=$(grep -n "DATE" ${CONFIG} | cut -d: -f1)
        KUBECTL_LINE=$(grep -n "KUBECTL" ${CONFIG} | cut -d: -f1)
        HELM_LINE=$(grep -n "HELM" ${CONFIG} | cut -d: -f1)
        DRAFT_LINE=$(grep -n "DRAFT" ${CONFIG} | cut -d: -f1)
        GUARD_LINE=$(grep -n "GUARD" ${CONFIG} | cut -d: -f1)
        ARGOCD_LINE=$(grep -n "ARGOCD" ${CONFIG} | cut -d: -f1)
        AWS_CLI_LINE=$(grep -n "AWS_CLI" ${CONFIG} | cut -d: -f1)
        AWS_IAM_AUTHENTICATOR_LINE=$(grep -n "AWS_IAM_AUTHENTICATOR" ${CONFIG} | cut -d: -f1)

        sed -i -e "${DATE_LINE}s#.*#DATE=\"${DATE}\"#g" ${CONFIG}
        sed -i -e "${KUBECTL_LINE}s#.*#KUBECTL=\"${KUBECTL}\"#g" ${CONFIG}
        sed -i -e "${HELM_LINE}s#.*#HELM=\"${HELM}\"#g" ${CONFIG}
        sed -i -e "${DRAFT_LINE}s#.*#DRAFT=\"${DRAFT}\"#g" ${CONFIG}
        sed -i -e "${GUARD_LINE}s#.*#GUARD=\"${GUARD}\"#g" ${CONFIG}
        sed -i -e "${ARGOCD_LINE}s#.*#ARGOCD=\"${ARGOCD}\"#g" ${CONFIG}
        sed -i -e "${AWS_CLI_LINE}s#.*#AWS_CLI=\"${AWS_CLI}\"#g" ${CONFIG}
        sed -i -e "${AWS_IAM_AUTHENTICATOR_LINE}s#.*#AWS_IAM_AUTHENTICATOR=\"${AWS_IAM_AUTHENTICATOR}\"#g" ${CONFIG}

        cat ${CONFIG}
    fi
}

_cluster() {
    _debug_mode
    __helm_init

    # kubernetes-dashboard
    DASHBOARD="$(kubectl get ing -n kube-system | grep kubernetes-dashboard | awk '{print $2}' | xargs)"

    if [ "${DASHBOARD}" != "" ]; then
        _result "kubernetes-dashboard: http://${DASHBOARD}/"

        # kubernetes-dashboard token
        __create_cluster_role_binding admin kube-system kubernetes-dashboard-admin true
    fi

    # namespace
    __namespace "development" true
    __helm_repo
}

__helm_install() {
    _NS=$1
    _NM=$2

    CNT=$(helm ls ${_NM} | wc -l | xargs)

    if [ "x${CNT}" == "x0" ] || [ ! -z ${FORCE} ]; then
        CHART=/tmp/${_NM}.yaml

        __get_yaml "charts/${_NM}" "${CHART}"

        CHART_VERSION=$(cat ${CHART} | grep chart-version | awk '{print $3}' | xargs)

        if [ -z ${CHART_VERSION} ] || [ "${CHART_VERSION}" == "latest" ]; then
            _command "helm upgrade --install ${_NM} stable/${_NM}"
            command_chk_exitcode "helm upgrade --install ${_NM} stable/${_NM} --namespace ${_NS} -f ${CHART}"
        else
            _command "helm upgrade --install ${_NM} stable/${_NM} --version ${CHART_VERSION}"
            command_chk_exitcode "helm upgrade --install ${_NM} stable/${_NM} --namespace ${_NS} -f ${CHART} --version ${CHART_VERSION}"
        fi
    fi
}

__get_yaml() {
    _NAME=$1
    _DIST=$2

    command_chk_exitcode "curl -sL https://raw.githubusercontent.com/${THIS_REPO}/${THIS_NAME}/master/${_NAME}.yaml > ${_DIST}"
}

__helm_delete() {
    _NM=$1

    CNT=$(helm ls ${_NM} | wc -l | xargs)

    if [ "x${CNT}" != "x0" ]; then
        _command "helm delete ${_NM} --purge"
        command_chk_exitcode "helm delete ${_NM} --purge"
    fi
}

__namespace() {
    _debug_mode
    NAMESPACE=$1
    DEFAULT=$2

    CHECK=

    _command "kubectl get ns ${NAMESPACE}"
    command_chk_exitcode "kubectl get ns ${NAMESPACE} > /dev/null 2>&1 || export CHECK=CREATE"

    if [ "${CHECK}" == "CREATE" ]; then
        _result "${NAMESPACE}"

        _command "kubectl create ns ${NAMESPACE}"
        command_chk_exitcode "kubectl create ns ${NAMESPACE}"
    fi

    if [ "${DEFAULT}" == "true" ]; then
        command_chk_exitcode "kubectl config set-context $(kubectl config current-context) --namespace=${NAMESPACE}"
    fi
}

__create_service_account() {
    _debug_mode
    _NAMESPACE=$1
    _ACCOUNT=$2

    CHECK=

    _command "kubectl get sa ${_ACCOUNT} -n ${_NAMESPACE}"
    command_chk_exitcode "kubectl get sa ${_ACCOUNT} -n ${_NAMESPACE} > /dev/null 2>&1 || export CHECK=CREATE"

    if [ "${CHECK}" == "CREATE" ]; then
        _result "${_NAMESPACE}:${_ACCOUNT}"

        _command "kubectl create sa ${_ACCOUNT} -n ${_NAMESPACE}"
        command_chk_exitcode "kubectl create sa ${_ACCOUNT} -n ${_NAMESPACE}"
    fi
}

__create_cluster_role_binding() {
    _debug_mode
    _ROLE=$1
    _NAMESPACE=$2
    _ACCOUNT=${3:-default}
    _TOKEN=${4:-false}

    __create_service_account ${_NAMESPACE} ${_ACCOUNT}

    CHECK=

    _command "kubectl get clusterrolebinding ${_ROLE}:${_NAMESPACE}:${_ACCOUNT}"
    command_chk_exitcode "kubectl get clusterrolebinding ${_ROLE}:${_NAMESPACE}:${_ACCOUNT} > /dev/null 2>&1 || export CHECK=CREATE"

    if [ "${CHECK}" == "CREATE" ]; then
        _result "${_ROLE}:${_NAMESPACE}:${_ACCOUNT}"

        _command "kubectl create clusterrolebinding ${_ROLE}:${_NAMESPACE}:${_ACCOUNT} --clusterrole=${_ROLE} --serviceaccount=${_NAMESPACE}:${_ACCOUNT}"
        command_chk_exitcode "kubectl create clusterrolebinding ${_ROLE}:${_NAMESPACE}:${_ACCOUNT} --clusterrole=${_ROLE} --serviceaccount=${_NAMESPACE}:${_ACCOUNT}"
    fi

    if [ "${_TOKEN}" == "true" ]; then
        SECRET=$(kubectl get secret -n ${_NAMESPACE} | grep ${_ACCOUNT}-token | awk '{print $1}')

        _command "kubectl describe secret ${SECRET} -n ${_NAMESPACE}"
        command_chk_exitcode "kubectl describe secret ${SECRET} -n ${_NAMESPACE} | grep 'token:'"
    fi
}

__waiting_pod() {
    _NS=${1}
    _NM=${2}
    SEC=${3:-30}

    TMP=/tmp/${THIS_NAME}-pod-status

    _command "kubectl get pod -n ${_NS} | grep ${_NM}"

    IDX=0
    while [ 1 ]; do
        command_chk_exitcode "kubectl get pod -n ${_NS} | grep ${_NM} | head -1 > ${TMP}"
        cat ${TMP}

        STATUS=$(cat /tmp/${THIS_NAME}-pod-status | awk '{print $3}')

        if [ "${STATUS}" == "Running" ] && [ "${_NS}" != "development" ]; then
            READY=$(cat /tmp/${THIS_NAME}-pod-status | awk '{print $2}' | cut -d'/' -f1)
        else
            READY="1"
        fi

        if [ "${STATUS}" == "Running" ] && [ "x${READY}" != "x0" ]; then
            break
        elif [ "${STATUS}" == "Error" ]; then
            _error "${STATUS}"
        elif [ "${STATUS}" == "CrashLoopBackOff" ]; then
            _error "${STATUS}"
        elif [ "x${IDX}" == "x${SEC}" ]; then
            _error "Timeout"
        fi

        IDX=$(( ${IDX} + 1 ))
        sleep 2
    done
}

__helm_init() {
    _debug_mode
    _command "helm init --upgrade"
    command_chk_exitcode "helm init --upgrade"

    _command "helm repo update"
    command_chk_exitcode "helm repo update"

    # tiller
    __waiting_pod "kube-system" "tiller"

    # _command "helm version"
    # helm version

    if [ ! -z ${DELETE} ]; then
        __helm_delete "nginx-ingress"
        __helm_delete "docker-registry"
        __helm_delete "kubernetes-dashboard"
        __helm_delete "metrics-server"
        __helm_delete "heapster"
    fi

    # namespace
    NAMESPACE="kube-system"

    __helm_install "${NAMESPACE}" "nginx-ingress"
    __helm_install "${NAMESPACE}" "docker-registry"
    __helm_install "${NAMESPACE}" "kubernetes-dashboard"
    __helm_install "${NAMESPACE}" "metrics-server"
    __helm_install "${NAMESPACE}" "heapster"

    __waiting_pod "${NAMESPACE}" "docker-registry"
    __waiting_pod "${NAMESPACE}" "nginx-ingress"
}

__helm_repo() {
    _debug_mode
    CNT=$(helm repo list | grep chartmuseum | wc -l | xargs)

    if [ "x${CNT}" == "x0" ] || [ ! -z ${FORCE} ]; then
        if [ -f ${CONFIG} ]; then
            CHARTMUSEUM=$(cat ${CONFIG} | grep CHARTMUSEUM | awk -F'=' '{print $NF}')
        else
            _error "Check config using valve config. Or use valve fetch --help / valve fetch -h and fetch your template."
        fi

        _command "helm repo add chartmuseum https://${CHARTMUSEUM}"
        command_chk_exitcode "helm repo add chartmuseum https://${CHARTMUSEUM}"

        # _config_save
    fi

    _command "helm repo update"
    command_chk_exitcode "helm repo update > /dev/null"
}
##################################################################################

_run $@