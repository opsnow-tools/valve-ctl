#!/bin/bash

CUR_DIR=${0%/*}
CUR_OBJECT=`echo $CUR_DIR | cut -d "/" -f6`
CUR_NAME=${0##*/}

####### common functions
source ${ROOT_SHELL_DIR}/common.sh


readonly SHORT_OPT="hvadspcmioe"
readonly LONG_OPT="help,verbose,all,helm,deployments,services,pods,containers,configmap,hpa,ing"

_help() {
    cat <<EOF
================================================================================
Usage: valve ${CUR_NAME} {Params}                                로컬 클러스터에 배포한 app과 관련된 자원을 보여줍니다. 아래 Params를 이용합니다.
                                                                 helm/deployment/service/pod/container/configmap/hpa를 보여줍니다.

Params:
    -h, --help                                                   valve get 화면을 보여줍니다.

    -a, --all                        (optional)                  로컬 클러스터에 배포한 app과 관련된 모든 자원을 보여줍니다. (helm/deployment/service/pod/container/configmap/hpa)
    -e, --helm                       (optional)                  로컬 클러스터에 배포한 app의 helm 정보를 보여줍니다.
    -d, --deployments                (optional)                  로컬 클러스터에 배포한 app의 deployment 정보를 보여줍니다.
    -s, --services                   (optional)                  로컬 클러스터에 배포한 app의 service 정보를 보여줍니다.
    -p, --pods                       (optional)                  로컬 클러스터에 배포한 app의 pod 정보를 보여줍니다.
    -c, --containers                 (optional)                  로컬 클러스터에 배포한 app의 container 정보를 보여줍니다.
    -m, --configmap                  (optional)                  로컬 클러스터에 배포한 app의 configmap 정보를 보여줍니다.
    -o, --hpa                        (optional)                  로컬 클러스터에 배포한 app의 hpa정보를 보여줍니다.
    -i, --ing                        (optional)                  로컬 클러스터에 배포한 app의 주소를 보여줍니다.

Examples:
    $ valve get -h / valve get --help
    $ valve get -a / valve get --all
    $ valve get -e / valve get --helm
    $ valve get -d / valve get --deployments
    $ valve get -s / valve get --services
    $ valve get -p / valve get --pods
    $ valve get -c / valve get --containers
    $ valve get -m / valve get --configmap
    $ valve get -o / valve get --hpa
    $ valve get -i / vlave get --ing
================================================================================
EOF
}

_run() {

    OPTIONS=$(getopt -l "${LONG_OPT}" -o "${SHORT_OPT}" -a -- "$@"  2>${CUR_DIR}/.tmp)
    if  [ $? -eq 1 ]; then
        _help
        _error_noreport "Error params: `cat ${CUR_DIR}/.tmp && rm -f ${CUR_DIR}/.tmp `"
    fi
    eval set -- "${OPTIONS}"

    while [ $# -gt 0 ]; do
        case "$1" in
            -a|--all)
                _all_get
                ;;
            -e|--helm)
                _helm_get
                ;;
            -d|--deployments)
                _deploy_get
                ;;
            -s|--services)
                _service_get
                ;;
            -p|--pods)
                _pod_get
                ;;
            -c|--containers)
                _container_get
                ;;
            -m|--configmap)
                _configmap_get
                ;;
            -o|--hpa)
                _hpa_get
                ;;
            -i|--ing)
                _ing_get
                ;;
            -h|--help)
                _help
                exit 0
                ;;
            -v|--verbose)
                DEBUG_MODE=true
                VERBOSE=$(($VERBOSE + 1))
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done
}

##################################################################################

_all_get() {
    _debug_mode

    _command "helm ls --all"
    command_chk_exitcode "helm ls --all"

    _command "kubectl get all --all-namespaces"
    command_chk_exitcode "kubectl get all --all-namespaces"
}

_helm_get() {
    _debug_mode

    _command "helm ls --all | grep ${NAMESPACE}"
    command_chk_exitcode "helm ls --all | grep ${NAMESPACE}"

    _command "kubectl get pod,svc,ing -n ${NAMESPACE}"
    command_chk_exitcode "kubectl get pod,svc,ing -n ${NAMESPACE}"
}

_deploy_get() {
    _debug_mode

    _command "kubectl get deployment -n ${NAMESPACE}"
    command_chk_exitcode "kubectl get deployment -n ${NAMESPACE}"
    echo -e
    command_chk_exitcode "kubectl get ing -n ${NAMESPACE}"
}

_service_get() {
    _debug_mode

    _command "kubectl get svc -n ${NAMESPACE}"
    command_chk_exitcode "kubectl get svc -n ${NAMESPACE}"
}

_pod_get() {
    _debug_mode

    _command "kubectl get pod -n ${NAMESPACE}"
    command_chk_exitcode "kubectl get pod -n ${NAMESPACE}"
}

_container_get() {
    _debug_mode

    _command "kubectl get pods -n ${NAMESPACE} -o=custom-columns=NameSpace:.metadata.namespace,NAME:.metadata.name,CONTAINERS:.spec.containers[*].name"
    command_chk_exitcode "kubectl get pods -ndevelopment -o=custom-columns=NameSpace:.metadata.namespace,NAME:.metadata.name,CONTAINERS:.spec.containers[*].name"
}

_configmap_get() {
    _debug_mode
    _command "kubectl get configmap -n ${NAMESPACE}"
    command_chk_exitcode "kubectl get configmap -n ${NAMESPACE}"
}

_hpa_get() {
    _debug_mode
    _command "kubectl get hpa -n ${NAMESPACE}"
    command_chk_exitcode "kubectl get hpa -n ${NAMESPACE}"

    _command "kubectl describe hpa -n ${NAMESPACE}"
    command_chk_exitcode "kubectl describe hpa -n ${NAMESPACE}"
}

_ing_get() {
    _debug_mode
    #ING_URL=$(kubectl get ing -n ${NAMESPACE} | awk -F' ' '{print $2}' | sed '1d')
    #_result "URL = "${ING_URL}
    _command "kubectl get ing -n ${NAMESPACE}"
    command_chk_exitcode "kubectl get ing -n ${NAMESPACE}"
}
##################################################################################

_run $@
