#!/bin/bash

CUR_DIR=${0%/*}
CUR_OBJECT=`echo $CUR_DIR | cut -d "/" -f6`
CUR_NAME=${0##*/}

####### common functions
source ${ROOT_SHELL_DIR}/common.sh


readonly SHORT_OPT="hvp:c:f"
readonly LONG_OPT="help,verbose,pod:,container:,follow"

_help() {
    cat <<EOF
================================================================================
Usage: valve ${CUR_NAME} {Params}                               로컬 클러스터에 배포한 app에 log로 확인합니다.

Params:
    -h, --help                                                  valve log 화면을 보여줍니다.

    -p, --pod                               (requirement)       로컬 클러스터에 배포한 app의 이름을 이용하여 log를 확인합니다.
                                                                로컬 클러스터에 배포한 app의 이름은 valve get --pods 로 검색합니다.
    -c, --container                         (optional)          로컬 클러스터에 배포한 app이 동작중인 컨테이너 이름을 이용하여 log를 확인합니다.
    -f, --follow                            (optional)          로컬 클러스터에 배포한 app의 log를 따라갑니다.

Examples:
    [Mandatory]
    $ valve get --pods
    $ valve log --pod sample-tomcat-751-bnj
================================================================================
EOF
}

_run() {

    OPTIONS=$(getopt -l "${LONG_OPT}" -o "${SHORT_OPT}" -a -- "$@"  2>${CUR_DIR}/.tmp)
    if  [ $? -eq 1 ]; then
        _help
        _error_noreport "Error params: `cat ${CUR_DIR}/.tmp && rm -f ${CUR_DIR}/.tmp `"
    # elif ! [[ $@ =~ '-' ]]; then
    #     _help
    #     _error "Error params: $@"
    fi
    eval set -- "${OPTIONS}"

    while [ $# -gt 0 ]; do
        case "$1" in
            -p|--pod)
                shift
                PARAM_PODS=$1
                ;;
            -c|--container)
                shift
                PARAM_CONTAINER=$1
                ;;
            -f|--follow)
                PARAM_FOLLOW=true
                ;;
            -h|--help)
                _help
                exit 0
                ;;
            -v|--verbose)
                DEBUG_MODE=true
                VERBOSE=$(($VERBOSE + 1))
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done

    if [ -z ${PARAM_PODS} ]; then
        _help
        _error "Use valve log --help / valve log -h"
    else
        _logs
    fi
}

##################################################################################

_logs() {
    _debug_mode

    _command "kubectl get pod -n ${NAMESPACE}"
    FIND_POD=$(kubectl get pod -n ${NAMESPACE} | grep -v "NAME" | grep ${PARAM_PODS} | awk '{print $1}')
    if [[ ${FIND_POD} == ${PARAM_PODS} ]]; then
        P_CMD="kubectl logs -n ${NAMESPACE} ${FIND_POD}"
        if [ ! -z ${PARAM_CONTAINER} ]; then
            FIND_CONTAINER=$(kubectl get pods -ndevelopment -o=custom-columns=NameSpace:.metadata.namespace,NAME:.metadata.name,CONTAINERS:.spec.containers[*].name | grep ${PARAM_CONTAINER} | awk '{print $3}')
            if [[ ${FIND_CONTAINER} == ${PARAM_CONTAINER} ]]; then
                C_CMD=" -c ${FIND_CONTAINER}"
            else
                _error "There is no container that matching exactly. Use valve get --containers & check container name"
            fi
        else
            C_CMD=""
        fi
        if [[ ${PARAM_FOLLOW} == "true" ]]; then
            F_CMD=" -f"
        else
            F_CMD=""
        fi
    else
        _error "There is no pod that matching exactly. Use valve get --pods & check pods name"
    fi
    _command "${P_CMD}${C_CMD}${F_CMD}"
    ${P_CMD}${C_CMD}${F_CMD}
    _success
}
##################################################################################

_run $@
